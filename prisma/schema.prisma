// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  username     String  @id
  email        String  @unique
  firstName    String  @default("")
  lastName     String  @default("")
  imageProfile String
  password     String?
  level        Int     @default(0) // 0 => standard, 1 => premium
  isVerify     Boolean @default(false)

  readBlog          UserReadBlogPerson[]    @relation("readBy")
  readBlogCommunity UserReadBlogCommunity[]

  community Community[]

  create_at DateTime @default(now())

  followedBy Follows[] @relation("follower")
  following  Follows[] @relation("following")

  Community        UserInCommunity[]
  likeBy           LikeBy[]
  Blogs            Blogs[]
  DiscussPost      DiscussPost[]
  BlogsOnCommunity BlogsOnCommunity[]

  BlogCommunityComment BlogCommunityComment[]
  DiscussComment       DiscussComment[]
  BlogComment          BlogComment[]
}

model UserReadBlogPerson {
  Users         Users  @relation("readBy", fields: [usersUsername], references: [username])
  usersUsername String
  Blog          Blogs  @relation("readTo", fields: [BlogId], references: [blogId])
  BlogId        Int

  @@id([usersUsername, BlogId])
}

model UserReadBlogCommunity {
  Users         Users?             @relation(fields: [usersUsername], references: [username])
  usersUsername String?
  Blog          BlogsOnCommunity[]

  blogId Int @id @default(autoincrement())
}

model Follows {
  follower      Users  @relation("follower", fields: [followerUser], references: [username])
  followerUser  String
  following     Users  @relation("following", fields: [followingUser], references: [username])
  followingUser String

  @@id([followerUser, followingUser])
}

model Blogs {
  blogId        Int      @id @default(autoincrement())
  create_by     Users    @relation(fields: [usersUsername], references: [username])
  usersUsername String
  content       String   @db.Text
  title         String
  create_at     DateTime @default(now())

  isSpacial Int @default(0)

  readBlog UserReadBlogPerson[] @relation("readTo")
  category CategoryOnBlogs[]    @relation("blog")

  BlogComment BlogComment[]
}

model CategoryOnBlogs {
  blog       Blogs    @relation("blog", fields: [blogUserId], references: [blogId])
  blogUserId Int
  Category   Category @relation("Category", fields: [categoryId], references: [categoryId])
  categoryId Int

  @@id([blogUserId, categoryId])
}

model CategoryOnBlogsCommunity {
  blog       BlogsOnCommunity @relation("blogCommu", fields: [blogUserId], references: [blogId])
  blogUserId Int
  Category   Category         @relation("CategoryCommu", fields: [categoryId], references: [categoryId])
  categoryId Int

  @@id([blogUserId, categoryId])
}

model CategoryOnDiscuss {
  Post       DiscussPost @relation(fields: [postId], references: [dcpId])
  postId     Int
  Category   Category    @relation(fields: [categoryId], references: [categoryId])
  categoryId Int

  @@id([postId, categoryId])
}

model Category {
  categoryId   Int    @id @default(autoincrement())
  categoryName String

  following              CategoryOnDiscuss[]
  followingPost          CategoryOnBlogs[]          @relation("Category")
  followingPostCommunity CategoryOnBlogsCommunity[] @relation("CategoryCommu")
}

model DiscussPost {
  dcpId         Int     @id @default(autoincrement())
  create_by     Users   @relation(fields: [usersUsername], references: [username])
  usersUsername String
  content       String
  File          String?

  likeBy   LikeBy[]
  category CategoryOnDiscuss[]

  create_at DateTime @default(now())

  DiscussComment DiscussComment[]
}

model UserInCommunity {
  Users     Users     @relation(fields: [username], references: [username])
  username  String
  Community Community @relation(fields: [commuId], references: [commuId])
  commuId   String

  @@id([username, commuId])
}

model Community {
  commuId        String   @id @default(cuid())
  name           String
  communityImage String   @default("https://thumbs.dreamstime.com/z/people-line-icon-team-outline-logo-illustration-linear-pictogram-isolated-white-90235968.jpg")
  create_at      DateTime @default(now())

  users            UserInCommunity[]
  BlogsOnCommunity BlogsOnCommunity[]

  UserCreate Users?  @relation(fields: [create_by], references: [username])
  create_by  String?
}

model BlogsOnCommunity {
  blogId           Int       @id @default(autoincrement())
  create_by        Users     @relation(fields: [usersUsername], references: [username])
  usersUsername    String
  at_community     Community @relation(fields: [communityCommuId], references: [commuId])
  communityCommuId String
  content          String    @db.Text
  title            String
  create_at        DateTime  @default(now())

  category                    CategoryOnBlogsCommunity[] @relation("blogCommu")
  BlogComment                 BlogCommunityComment[]
  UserReadBlogCommunity       UserReadBlogCommunity?     @relation(fields: [userReadBlogCommunityBlogId], references: [blogId])
  userReadBlogCommunityBlogId Int?
}

model BlogComment {
  id        Int      @id @default(autoincrement())
  context   String
  create_at DateTime @default(now())

  comment_by    Users  @relation(fields: [usersUsername], references: [username])
  blog          Blogs  @relation(fields: [blogsBlogId], references: [blogId])
  blogsBlogId   Int
  usersUsername String
}

model BlogCommunityComment {
  id        Int      @id @default(autoincrement())
  context   String
  create_at DateTime @default(now())

  comment_by             Users            @relation(fields: [usersUsername], references: [username])
  usersUsername          String
  BlogsOnCommunity       BlogsOnCommunity @relation(fields: [blogsOnCommunityBlogId], references: [blogId])
  blogsOnCommunityBlogId Int
}

model DiscussComment {
  id        Int      @id @default(autoincrement())
  context   String
  create_at DateTime @default(now())

  create_by        Users       @relation(fields: [usersUsername], references: [username])
  usersUsername    String
  discuss_at       DiscussPost @relation(fields: [discussPostDcpId], references: [dcpId])
  discussPostDcpId Int
}

model LikeBy {
  Posts    DiscussPost? @relation(fields: [postsId], references: [dcpId])
  postsId  Int
  Users    Users?       @relation(fields: [username], references: [username])
  username String

  @@id([username, postsId])
}
