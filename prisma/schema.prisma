// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  username     String  @id
  email        String  @unique
  firstName    String  @default("")
  lastName     String  @default("")
  imageProfile String
  password     String?
  level        Int     @default(0) // 0 => standard, 1 => premium
  isVerify     Boolean @default(false)

  readBlog          UserReadBlogPerson[]
  readBlogCommunity UserReadBlogCommunity[]

  create_at DateTime @default(now())

  followedBy Follows[] @relation("follower")
  following  Follows[] @relation("following")

  Community        Community[]
  Blogs            Blogs[]
  DiscussPost      DiscussPost[]
  BlogsOnCommunity BlogsOnCommunity[]

  BlogCommunityComment BlogCommunityComment[]
  DiscussComment       DiscussComment[]
  BlogComment          BlogComment[]
}

model UserReadBlogPerson {
  Users         Users?  @relation(fields: [usersUsername], references: [username])
  usersUsername String?
  Blog          Blogs[]

  blogId Int @id @default(autoincrement())
}

model UserReadBlogCommunity {
  Users         Users?             @relation(fields: [usersUsername], references: [username])
  usersUsername String?
  Blog          BlogsOnCommunity[]

  blogId Int @id @default(autoincrement())
}

model Follows {
  follower      Users  @relation("follower", fields: [followerUser], references: [username])
  followerUser  String
  following     Users  @relation("following", fields: [followingUser], references: [username])
  followingUser String

  @@id([followerUser, followingUser])
}

model Blogs {
  blogId        Int      @id @default(autoincrement())
  create_by     Users    @relation(fields: [usersUsername], references: [username])
  usersUsername String
  content       String   @db.Text
  title         String
  create_at     DateTime @default(now())

  BlogComment              BlogComment[]
  Category                 Category?           @relation(fields: [categoryId], references: [categoryId])
  categoryId               Int?
  UserReadBlogPerson       UserReadBlogPerson? @relation(fields: [userReadBlogPersonBlogId], references: [blogId])
  userReadBlogPersonBlogId Int?
}

model Category {
  categoryId   Int    @id @default(autoincrement())
  categoryName String

  blog          Blogs[]
  blogCommunity BlogsOnCommunity[]
}

model DiscussPost {
  dcpId         Int      @id @default(autoincrement())
  create_by     Users    @relation(fields: [usersUsername], references: [username])
  usersUsername String
  create_at     DateTime @default(now())

  DiscussComment DiscussComment[]
}

model Community {
  commuId       String   @id @default(cuid())
  name          String
  popularity    Int
  create_by     Users    @relation(fields: [usersUsername], references: [username])
  usersUsername String
  create_at     DateTime @default(now())

  BlogsOnCommunity BlogsOnCommunity[]
}

model BlogsOnCommunity {
  blogId           Int       @id @default(autoincrement())
  create_by        Users     @relation(fields: [usersUsername], references: [username])
  usersUsername    String
  at_community     Community @relation(fields: [communityCommuId], references: [commuId])
  communityCommuId String
  content          String    @db.Text
  title            String
  create_at        DateTime  @default(now())

  BlogComment                 BlogCommunityComment[]
  Category                    Category?              @relation(fields: [categoryCategoryId], references: [categoryId])
  categoryCategoryId          Int?
  UserReadBlogCommunity       UserReadBlogCommunity? @relation(fields: [userReadBlogCommunityBlogId], references: [blogId])
  userReadBlogCommunityBlogId Int?
}

model BlogComment {
  id        Int      @id @default(autoincrement())
  context   String
  create_at DateTime @default(now())

  comment_by    Users  @relation(fields: [usersUsername], references: [username])
  blog          Blogs  @relation(fields: [blogsBlogId], references: [blogId])
  blogsBlogId   Int
  usersUsername String
}

model BlogCommunityComment {
  id        Int      @id @default(autoincrement())
  context   String
  create_at DateTime @default(now())

  comment_by             Users            @relation(fields: [usersUsername], references: [username])
  usersUsername          String
  BlogsOnCommunity       BlogsOnCommunity @relation(fields: [blogsOnCommunityBlogId], references: [blogId])
  blogsOnCommunityBlogId Int
}

model DiscussComment {
  id        Int      @id @default(autoincrement())
  content   String
  create_at DateTime @default(now())

  dicuss_by        Users       @relation(fields: [usersUsername], references: [username])
  usersUsername    String
  discuss_at       DiscussPost @relation(fields: [discussPostDcpId], references: [dcpId])
  discussPostDcpId Int
}
